digraph architecture{
  node [shape = signature]; KeySigning [label="KeySigning (isolated process)"];
  node [shape = octagon]; SyncManager SyncProtocol MainChain_Monitor Time CLI ValidatorUI Slashing LibP2P ETH2_API ncli nfuzz Rewinder ForkChoice;
  ETH2_API [label="ETH2.0-API (REST)"];
  Slashing [label="Slashing Detection & Protection"];
  ForkChoice [label="Fork Choice Engine\n(ProtoArray)"];
  {rank = source; ETH1_DepositContract LibP2P ETH2_API CLI Time ValidatorUI;}

  node [shape = record] BeaconNode;
  BeaconNode [label="<nbc>Beacon Node | <PeerPool>PeerPool"]

  ncli [label="ncli/nbench"];
  {rank = same; ncli; nfuzz;}

  node [shape = doubleoctagon]; Blocksmith Quarantine Clearance;
  node [shape = invhouse]; Phase_1 Phase_2 Eth1_EE;
  node [shape = note] SSZ HashTreeRoot BLS_Signature Chronicles Metrics SHA256
  {rank = same; Blocksmith Phase_1 Phase_2 SSZ HashTreeRoot BLS_Signature Chronicles Metrics SHA256;}

  BeaconNode -> Phase_1
  BeaconNode -> Phase_2
  Phase_2 -> Eth1_EE

  node [shape = record]; QuarantinedDB;
  QuarantinedDB [label="QuarantinedDB | {Unresolved Blocks | Unresolved Attestations}"];

  node [shape = record]; RewinderWorkerPool;
  node [shape = box]; BeaconState_X;

  RewinderWorkerPool [label="{RewinderWorkerPool | {<bs0>BeaconState 0|<bs1>BeaconState 1|<bs2>BeaconState 2|<bs3>BeaconState 3}}"];
  {rank = same; RewinderWorkerPool BeaconState_X;}

  node [shape = cylinder]; AttestationDB HotDB ColdDB;
  {rank = sink; AttestationDB SignedBlockDB HotDB ColdDB;}
  HotDB [label="HotDB\n(Direct Acyclic Graph of candidate chains)"]
  ColdDB [label="ColdDB\n(Finalized chain)"]

  {rank = same; MainChain_Monitor SyncManager SyncProtocol;}
  ETH1_DepositContract -> MainChain_Monitor
  MainChain_Monitor -> BeaconNode

  SyncManager -> BeaconNode:PeerPool [dir=both]
  SyncProtocol -> BeaconNode:PeerPool [dir=both]

  CLI -> BeaconNode
  ValidatorUI -> BeaconNode
  Time -> BeaconNode
  BeaconNode -> Blocksmith [dir=both color="black:black"]
  BeaconNode -> QuarantinedDB
  Blocksmith -> Quarantine [dir=both color="black:black"]
  Blocksmith -> Clearance [dir=both color="black:black"]
  Quarantine -> QuarantinedDB [dir=both label="resolve()"]

  ncli -> BeaconState_X [label="state_transition()"]
  nfuzz -> BeaconState_X [label="state_transition()"]

  SyncProtocol -> LibP2P [label="Sync requests"]
  LibP2P -> SyncManager [label="Sync replies"]

  LibP2P -> BeaconNode:PeerPool [label="Recv unsafe blocks\nRecv unsafe attestations"]
  BeaconNode:PeerPool -> LibP2P [label="Blocks proposed\nAggregate attestations"]
  ETH2_API -> BeaconNode [dir="both", label="/beacon/head\n/beacon/block\n/beacon/state"]

  Clearance -> ForkChoice [dir="both", label="process_attestation()\nprocess_block()\nfind_head()\nmaybe_prune()"]

  Quarantine -> Slashing [dir="both", label="isSlashable()"]
  Clearance -> KeySigning [dir="both", label="signBlock()"]
  KeySigning -> Slashing [dir="both", label="alreadyVoted()"]
  Slashing -> AttestationDB [label="votingTrail\npruneFinalized()"]
  Slashing -> SignedBlockDB [label="signedBlockTrail\npruneFinalized()"]
  Clearance -> AttestationDB [dir="both", label="getAttestationsForBlockSlot()"]

  Clearance -> HotDB [dir="both", label="pruneFinalized()\nSync"]

  Rewinder -> RewinderWorkerPool [dir="both", label="prepareTargetBlockSlot()\nstate_transition()"]
  RewinderWorkerPool:bs1 -> HotDB [dir="both", label="getReplayStateTrail()"]

  Quarantine -> Rewinder [dir="both", label="isValidBeaconBlockEx()\nisValidAttestationEx()"]
  Clearance -> Rewinder [dir="both", label="produceBlock()"]


  Clearance -> ColdDB [dir="both", label="pushFinalizedChain()\nSync"]
}
