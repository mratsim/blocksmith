digraph architecture{
  node [shape = signature]; SecretKeyService [label="SecretKeyService (isolated process)"];
  node [shape = octagon]; SyncManager SyncProtocol MainChain_Monitor Time CLI ValidatorUI Slashing LibP2P ETH2_API ncli nfuzz ForkChoice;
  ETH2_API [label="ETH2.0-API (REST)"];
  Slashing [label="Slashing Detection & Protection"];
  ForkChoice [label="Fork Choice - Proof-Of-Stake\n(ProtoArray)"];
  {rank = source; ETH1_DepositContract LibP2P ETH2_API CLI Time ValidatorUI;}

  node [shape = record] BeaconNode;
  BeaconNode [label="<rpc> BeaconRPC | <nbc> Beacon Node \n Validator Client | <PeerPool>PeerPool"]

  ncli [label="ncli/nbench"];
  {rank = same; ncli; nfuzz;}

  node [shape = doubleoctagon]; Blocksmith Quarantine Clearance;
  node [shape = invhouse]; Phase_1 Phase_2 Eth1_EE;
  node [shape = note] SSZ HashTreeRoot BLS_Signature Chronicles Metrics SHA256
  {rank = same; Blocksmith Phase_1 Phase_2 SSZ HashTreeRoot BLS_Signature Chronicles Metrics SHA256;}

  BeaconNode:nbc -> Phase_1
  BeaconNode:nbc -> Phase_2
  Phase_2 -> Eth1_EE

  node [shape = record]; QuarantinedDB;
  QuarantinedDB [label="QuarantinedDB | {Unresolved Blocks | Unresolved Attestations}"];

  node [shape = record]; Rewinder;
  node [shape = box]; BeaconState_X;
  BeaconState_X [label="Consensus Engine X\n(BeaconState X)"]

  Rewinder [label="{Rewinder service + Worker pool|{<bs0>Consensus Engine 0\n(BeaconState 0)|<bs1>Consensus Engine 1\n(BeaconState 1)|<bs2>Consensus Engine 2\n(BeaconState 2)|<bsN>Consensus Engine N\n(BeaconState N)}}"];
  {rank = same; Rewinder BeaconState_X;}

  node [shape = cylinder]; AttestationDB HotDB ColdDB;
  {rank = sink; AttestationDB SignedBlockDB HotDB ColdDB QuarantinedDB;}
  HotDB [label="HotDB\n(Direct Acyclic Graph of candidate chains)"]
  ColdDB [label="ColdDB\n(Finalized chain)"]

  {rank = same; MainChain_Monitor SyncManager SyncProtocol;}
  ETH1_DepositContract -> MainChain_Monitor
  MainChain_Monitor -> BeaconNode:nbc

  SyncManager -> BeaconNode:PeerPool [dir=both]
  SyncProtocol -> BeaconNode:PeerPool [dir=both]

  CLI -> BeaconNode:nbc
  ValidatorUI -> BeaconNode:nbc
  Time -> BeaconNode:nbc
  BeaconNode:nbc -> Blocksmith [dir=both color="black:black"]
  BeaconNode:nbc -> Quarantine
  Blocksmith -> Quarantine [dir=both color="black:black"]
  Blocksmith -> Clearance [dir=both color="black:black"]
  Quarantine -> QuarantinedDB [dir=both label="resolve()"]

  ncli -> BeaconState_X [label="state_transition()"]
  nfuzz -> BeaconState_X [label="state_transition()"]

  SyncProtocol -> LibP2P [label="Sync requests"]
  LibP2P -> SyncManager [label="Sync replies"]

  LibP2P -> BeaconNode:PeerPool [label="Recv unsafe blocks\nRecv unsafe attestations"]
  BeaconNode:PeerPool -> LibP2P [label="Blocks proposed\nAggregate attestations"]
  ETH2_API -> BeaconNode:rpc [dir="both", label="/beacon/head\n/beacon/block\n/beacon/state"]

  BeaconNode:rpc -> Rewinder [dir="both", label="rpcQueryStateForBlock()\nrpcQueryStateAtSlot()"]

  Clearance -> ForkChoice [dir="both", label="find_head()\nmaybe_prune()"]
  Rewinder:bsN -> ForkChoice [label="process_attestation()\nprocess_block()"]

  Quarantine -> Slashing [dir="both", label="isSlashable()"]
  Rewinder:bs1 -> SecretKeyService [dir="both", label="signBlock()"]
  SecretKeyService -> Slashing [dir="both", label="alreadyVoted()"]
  Slashing -> AttestationDB [label="votingTrail\npruneFinalized()"]
  Slashing -> SignedBlockDB [label="signedBlockTrail\npruneFinalized()"]
  Rewinder:bs1 -> AttestationDB [dir="both", label="getAttestationsForBlockSlot()"]

  Clearance -> HotDB [dir="both", label="pruneFinalized()\nSync Out"]

  Rewinder:bs2 -> HotDB [dir="both", label="getReplayStateTrail()\naddClearedBlockAndState()\ngetIntermediateBeaconStatesForCaching()"]

  Quarantine -> Rewinder [dir="both", label="tryClearQuarantinedBlock()\ntryClearQuarantinedAttestation()"]
  Clearance -> Rewinder [dir="both", label="produceBlock()"]


  Clearance -> ColdDB [dir="both", label="pushFinalizedChain()\nSync Out"]
}
